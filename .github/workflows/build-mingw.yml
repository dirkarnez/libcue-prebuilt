name: cpp-cmake-mingw-prebuilt-release-actions-workflow
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
      - 'c*'

jobs:
  build:
    name: Create Release
    runs-on: windows-2019
    env:
      libraryName: libcue
      cmakeNativeInstallationPath: libcue-native-installation
      cmakeEmscriptenInstallationPath: libcue-emscripten-installation
      tagName: v2.2.1 # target tag
      mingwTargetZip: libcue-${{ github.ref_name }}-mingw64-x86_64-posix-seh-rev0-8.1.0.zip
      emsdkTagName: 3.1.25
      emscriptenTargetZip: libcue-${{ github.ref_name }}-emscripten-emsdk-3.1.25.zip
    steps:
      - uses: actions/checkout@v3
      
      - name: git clone
        shell: cmd
        run: git clone --recursive https://github.com/lipnitsk/libcue.git && cd libcue && git checkout ${{ env.tagName }}

      - name: git clone emsdk
        shell: cmd
        run: git clone --recursive https://github.com/emscripten-core/emsdk.git && cd emsdk && git checkout ${{ env.emsdkTagName }}
        
      - name: curl x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z
        shell: cmd
        run:  cd /d ${{ github.workspace }} && curl https://github.com/2641797006/c/blob/master/GCC-zip/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z?raw=true -L --output x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z && dir && 7z.exe x x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z
        
      - name: curl cmake-3.24.0-windows-x86_64.zip
        shell: cmd
        run: cd /d ${{ github.workspace }} && curl https://github.com/Kitware/CMake/releases/download/v3.24.0/cmake-3.24.0-windows-x86_64.zip -L --output cmake-3.24.0-windows-x86_64.zip && dir && 7z.exe x cmake-3.24.0-windows-x86_64.zip
      
      - name: curl PortableGit-2.38.1-64-bit.7z.exe
        shell: cmd
        run: |
          curl https://github.com/git-for-windows/git/releases/download/v2.38.1.windows.1/PortableGit-2.38.1-64-bit.7z.exe -L --output PortableGit-2.38.1-64-bit.7z.exe &&^
          dir &&^
          7z.exe x PortableGit-2.38.1-64-bit.7z.exe -o"PortableGit-2.38.1-64-bit"
        
      - name: curl python-3.7.9-amd64-portable.zip
        shell: cmd
        run: |
          curl https://github.com/dirkarnez/python-portable/releases/download/v3.7.9/python-3.7.9-amd64-portable.zip -L --output python-3.7.9-amd64-portable.zip &&^
          dir &&^
          7z.exe x python-3.7.9-amd64-portable.zip -o"python-3.7.9-amd64-portable"
          
      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: make autoconf automake libtool autogen perl flex bison

      - name: mingw64 build
        shell: msys2 {0}
        run: |
            workspace=$(pwd) && \
            export PATH="$workspace/mingw64:$workspace/mingw64/bin:$workspace/msys64/usr/bin:/usr/bin:$workspace/cmake-3.24.0-windows-x86_64/bin" && \
            gcc --version && \
            cd libcue && \
            g++ --version && \
            cmake.exe -G "MinGW Makefiles" \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_INSTALL_PREFIX="cmake-mingw64-build/${{ env.cmakeNativeInstallationPath }}" -B./cmake-mingw64-build && \
            cd cmake-mingw64-build && \
            cmake --build . && \
            cmake --install . 
            
      - name: emscripten build
        shell: msys2 {0}
        run: |
            workspace=$(pwd) && \
            export EMSDK="$workspace/emsdk" && \
            export EMSDK_NODE="$EMSDK/node/14.18.2_64bit/bin/node.exe" && \
            export EMSDK_PYTHON="$EMSDK/python/3.9.2-nuget_64bit/python.exe" && \
            export JAVA_HOME="$EMSDK/java/8.152_64bit" && \
            export PATH="$workspace/mingw64:$workspace/mingw64/bin:$workspace/msys64/usr/bin:/usr/bin:$workspace/cmake-3.24.0-windows-x86_64/bin" && \
            export PATH="$workspace/python-3.7.9-amd64-portable:$workspace/python-3.7.9-amd64-portable/Scripts:$PATH" && \
            export PATH="$workspace/PortableGit-2.38.1-64-bit/bin:$PATH" && \
            export PATH="$EMSDK:$EMSDK/upstream/emscripten:$EMSDK/node/14.18.2_64bit/bin:$PATH" && \
            cd "$EMSDK/python" && \
            ls && \
            cd "$EMSDK" && \
            ./emsdk install latest && \
            ./emsdk activate latest && \
            cd "$workspace\libcue" && \
            gcc --version && \
            cmake.exe -G"MinGW Makefiles" \
            -DCMAKE_TOOLCHAIN_FILE="$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake" \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_INSTALL_PREFIX="cmake-emscripten-build/${{ env.cmakeEmscriptenInstallationPath }}" \
            -B./cmake-emscripten-build && \
            cd cmake-emscripten-build && \
            cmake --build . && \
            cmake --install . 

      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          directory: "libcue/cmake-mingw64-build/${{ env.cmakeNativeInstallationPath }}"
          filename: "${{ env.mingwTargetZip }}"
          
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          directory: "libcue/cmake-emscripten-build/${{ env.cmakeEmscriptenInstallationPath }}"
          filename: "${{ env.emscriptenTargetZip }}"
          
      - name: Release prebuilt
        uses: ncipollo/release-action@v1
        with:
          artifacts: "libcue/cmake-mingw64-build/${{ env.cmakeNativeInstallationPath }}/${{ env.mingwTargetZip }}"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Release prebuilt
        uses: ncipollo/release-action@v1
        with:
          artifacts: "libcue/cmake-emscripten-build/${{ env.cmakeEmscriptenInstallationPath }}/${{ env.emscriptenTargetZip }}"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
